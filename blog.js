const blogPosts = {};
const blogArray = [];

// generator function to create a unique ID for each blog post
const blogIdGenerator = function* () {
    let uniqueId = 1
    // yield will return the current uniqueID and then pause the function. One the next function call, the ID counter will increment by 1 and then repeat the process of returning (yield) the next unique ID.
    while (true) {
        yield uniqueId
        uniqueId += 1
    }
}

// Create instance of generator
const blogIdFactory = blogIdGenerator()

// Factory function to create each blog object and cut down on repetitive typing
const blogObjectFactory = function (title, entry, author, ...tags) {
    // function to add a space after the , in the collection of tags
    let spacedTags = function createSpace() {
        let spacedTags = tags.join(", ");
        return spacedTags;
    }
    // factory function will return a function with this format, each prop will be populated with data either passed in as a parameter or created in this function such as Date and blog ID (from generator function)
    return Object.create(null, {
        "id": { value: blogIdFactory.next().value, enumerable: true },
        "author": { value: author, enumerable: true }, 
        "title": { value: title, enumerable: true },
        "content": { value: entry, enumerable: true },
        "tags": { value: spacedTags(), enumerable: true },
        "published": { value: Date.now(), enumerable: true }
    })
}

// assign a variable to hold my content for blog post 1
const blogPost1Content = "<p>Well after years of contemplating a career change and years of thinking of learning software development, I have finally taken a huge step on that journey. This past week was my first week of school (sounds so weird) at the <a href='http://www.nashvillesoftwareschool.com' target='_blank'>Nashville Software School</a> (NSS). This is a 6 month accelerated adult education program that teaches Full Stack Web Development. The hope is to learn enough in the next 6 months to land a job in Nashville in web development this coming summer.</p><p>To try and make sure that web development was something that interested me I started the <a href='http://freecodecamp.org' target='_blank'>freeCodeCamp.com</a> curriculum back in May of this year. I put a lot of hours into that over the months before being accepted in the NSS. I quickly found that I did enjoy it, even when it was quite challenging.I assumed that this work would be great preparation for NSS.After a week at NSS, I am very grateful to have put that time in. I was fortunate to be exposed to many technologies and methods that were taught this first week at NSS.This has kept me from feeling too overwhelmed so far. I know the time is coming, probably soon, where I will be 'in over my head' at NSS and feel stressed out and lost.I need to start getting to know the instructor Steve Brownlee, assistant instructor Meg Ducharme and TA, Jared Fuller better by going and asking one on one questions. So far I’ve met with Jared a few times to ask his opinion on my code or my process. All the instructors have put a big emphasis on not being afraid to ask questions and getting comfortable being uncomfortable. During my work on the freeCodeCamp challenges and projects, I have felt that frustration of being lost in a concept and not even knowing where to bring searching, or reading documentation on MDN and still being lost, or feeling more lost after reading those docs. I’m excited to have a community around me at NSS of classmates and instructors to go to for help and support. I need to start leaning on them though and not wait too long into the program. </p><p>I’ve been surprised at how quickly friendships are being made in our class. It’s been really great. I’m not usually someone who makes quick friends or who can be outgoing in new situations when around new people. But everyone has been very warm and supportive, from our class and the other classes at NSS. I think there are 2 other cohorts right now that are at NSS, cohorts 20 and 21. We are cohort 22 and cohort 23 should be starting 5 weeks. Going into day 2 I thought I should sit in a new seat to give myself the opportunity to meet more of my classmates. I also assumed that other students would do this too. It turned out that only about 3 or 4 of us sat in a different seat and then I felt guilty that someone may think that I stole their seat. On day 3 and every day since, I’ve sat in the same place and gotten to know those sitting around me better. We’ve already been placed into small groups, mainly with those that are sitting near each other. We haven’t been assigned a group project yet but have been told we will do several.</p><p>As for projects and work, so far we’ve worked on a handful of javascript exercises, which we do locally and then push up to our github account. We’ve also started working on our portfolio website and learned how github provides a nice project management tool similar to a Trello board where we can manage tickets and to-do items. I had a hard time deciding how to start this project. I wasn’t sure if I should start from scratch and try and build the whole site without a template or if I should take some of my work from my other portfolio page to get me started or if I should just find an online template that I liked and start from that.  I made a one page portfolio page in my freeCodeCamp work so I ended up borrowing some of my formatting and layout from that page and splitting it out into separate pages for things like my resume, blog, contact info and portfolio. When I came in early Friday morning, I thought I would look online for an inspiration template and redesign my index.html page. I found an image I liked and started working on it, then Steve came in and said he gave us 4 more tickets for this project and I thought, hmm I should probably just stick with what I have at the moment and work through the rest of my current tickets (4 or 5) so I can get to working on these four new tickets. So, I have a decent start to a website now and I’m planning to maybe redesign the main site layout and the color scheme at a later time. </p><p>I really enjoyed this first week of school. It’s a bit strange to be back in school. I have not been in a school environment since I graduated college in 2000. Now I have two children who are in school (7 and 5 years old) who ask me how my day at school was and ask great questions about my school and classroom and classmates. Wow, what a feeling to hear such young children be so interested in me. As a parent you can get so wrapped up on caring for your children, it’s sometimes strange to realize that they also care for you and are curious about what you’re doing.</p><p>Tomorrow starts my second week at NSS and I’m excited to see what I learn! I will be summarizing things here on this blog weekly or hopefully more often than that. Til next time….</p>"
// creating object for post using blogObjectFactory
const post1 = blogObjectFactory("First Week at Nashville Software School", blogPost1Content, "Greg Lawrence", "NSS")

// assign a variable to hold my content for blog post 2
const blogPost2Content = "<p>This past week and a half we have predominately been working on group projects. We split into groups and created a fictitious company, with products and each team member was responsible for a separate page on the company website. I believe the three big objectives for these exercises were to get more familiar with Git and Github, populating a webpage with data that is stored in a database and working on a team to achieve a unified goal.</p><p>We were introduced to some new concepts right before starting our first group project that were super useful. String templates are one of these concepts that have proved invaluable in our site design. Being able to write html code and use variables to access properties of an object gave us much more power in how we were able to put content inside the html on our page. We could now access some data that is nested inside an array or object which is inside of the larger object/database. With loops we could push that data to our website in an orderly fashion.</p><p>One my first group project I was in charge of the products page. I setup a straight forward database of items to populate the page. We decided to use css grid to layout our pages which meant I needed to read up on how to implement that. We spent a big portion of our time with the white board talking through our ideas for our made-up company, what would be on each page, our overall color theme and fonts. We coded our header and footer together. I setup a screen share on my laptop and coded while other teammates watched on their computers. After laying out our index.html page with our header and footer, each team member could copy and paste that code into their subpage and have a starting template. This sped up the process of giving our site a unified look.</p><p>We were introduced to the github team workflow with this first project. We learned to push our work up to github from our local branches and then use a pull-request to ask to have our code be added to the master version of our project. Another team member would then check our code and a site preview and then give us approval or comments on what to fix. This flow was new since up to this point we have all been working on our personal portfolio website alone. As practice, I have changed the flow of my work on my personal page to include these pull requests.</p><p>On my second group project I was again in charge of products and was able to structure my database of products slightly differently. This let me practice using different extraction methods simultaneously. I was required to populate the Products page header and description with content that did not need a loop to access. I realized during this project, and working on databases on my personal blog page, a big benefit of using arrays to hold objects in a database: controlling the order of the data. On my group project I wanted my products to always be ordered small, medium, large, XL and on my blog page I always wanted my blogs to be shown in reverse chronological order. With my blogs, I placed each blog post into an array and instead of using array.push() to place the blog post in the array, I used array.unshift(). This way each time I wrote a new blog post and needed to place that object into my array of blog posts, array.unshift() placed that new post at the beginning of my array. Then when I loop through my array to push the posts to my blog.html page, the posts were published in reverse chronological order with the most recent blog post showing up first. On my group project, I used array.push() and places my products into the array in order from small to XL.</p><p>On our second group project we gained a better understanding of who was \"in charge\” of our project. That person is the product owner, and in our case that was our instructor Steve. Our team set out to build a Moving Company website with a multipage application to allow the user to get a moving quote. We were going to each have a database object for the content on our site and then let the user put items in a database that we'd as a shopping cart and share amongst all of our pages. When the user tapped \“add to cart\” the item was going to get placed/pushed into the shopping cart object and when the user was finished and tapped to move to the next step, that cart was going to be written into local storage. Then the user was going to be sent to the next page and the cycle would repeat until the user made it to the last page where their cart was going to be totaled. Steve came by and met with us and let us know that this functionality was not a requirement that he, as product owner, gave us and would be too complicated for us to tackle in the time frame. He didn’t want us to use our time working on a feature that was not required, as it would be wasting ‘company’ time and could easily need to be scrapped at any moment. So, after this meeting we did some more planning and decided to stick with our overall website plan, but not attempt to interconnect our individual pages.</p><p>When we came into class on Day 2 of this second group project Steve had an announcement for us. Our product owner had a new requirement and it was now the main priority. This was to paginate our products page and display 20 products on 5 separate pages, each displaying 4 products. This was a big pivot for all the groups and meant that we all needed to stop our current work and move our resources over to this new goal. I think as a group we handled the stress well. I worked to restructure our database for clarity, add 16 new products, and redesign the product layout on the page to be a stacked list of items and not a grid. While I was working on that, Krys started researching methods to get control of the pagination elements and integrate all of that into our products page. As a group we discussed what the overall structure and functionality of the pagination would be. We settled on one approach and went to work designing it and implementing it.</p><p>For this second project I reminded myself frequently to make a minimal viable product, to keep from trying to achieve too much, and then not being able to finish a functioning product on time. There are many things on both of my group projects that I would love to put more time into, but I’m proud that we finished both projects on time and met all the requirements.</p><p>These group projects have been a great way to get to know our classmates better and learn teamwork in a software development environment. This work seems to be a mix of working together and alone and we need to learn how to manage those two spaces. Working with git and github allowed us to merge our individual work and build something with many different individual pieces without all being responsible for every piece. It was fun to merge in my work, view our page and then at a later point merge in a teammate's work and see how our page was coming together, piece by piece.</p><p>Something I would like to learn in the near future is how to limit how much of these blog posts are displayed on my main blog.html layout. After a certain size, I’d like to hide the additional content. Then have the user be able to expand a post to include all of the content, maybe have it display in a popup modal.</p>"
// creating object for post using blogObjectFactory
const post2 = blogObjectFactory("Who Is In Charge?", blogPost2Content, "Greg Lawrence", "NSS", "git", "github", "teamwork")

// creating object for post using blogObjectFactory
const post4 = blogObjectFactory("Test2 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")
const post3 = blogObjectFactory("Test1 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")
const post5 = blogObjectFactory("Test3 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")
const post6 = blogObjectFactory("Test4 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")
const post7 = blogObjectFactory("Test5 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")
const post8 = blogObjectFactory("Test6 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")
const post9 = blogObjectFactory("Test7 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")
const post10 = blogObjectFactory("Test8 Blog Factory", "Making sure this new method of generating blog posts works", "Greg Lawrence", "JS", "factory functions")



// using .unshift() instead of push() to place each new blog posts at the beginning of the array so the most recent blog post will always be at index 0. Then older posts will be posted in reverse chronological order
blogArray.unshift(post1);
blogArray.unshift(post2);
blogArray.unshift(post3);
blogArray.unshift(post4);
blogArray.unshift(post5);
blogArray.unshift(post6);
blogArray.unshift(post7);
blogArray.unshift(post8);
blogArray.unshift(post9);
blogArray.unshift(post10);



// assigning blogArray to a property inside of blogPosts
blogPosts.blogEntries = blogArray;

// Setting the database in local storage
localStorage.setItem("blogPosts", JSON.stringify(blogPosts));





